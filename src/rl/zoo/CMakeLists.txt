
function(RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT TARGET)
    if(RL_TOOLS_ENABLE_ZLIB)
        target_link_libraries(${TARGET} PRIVATE ZLIB::ZLIB)
    endif()
endfunction()
function(RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT TARGET)
    if(RL_TOOLS_ENABLE_CLI11)
        target_link_libraries(${TARGET} PRIVATE CLI11::CLI11)
    endif()
endfunction()

# SAC Pendulum-v1
add_executable(rl_zoo_sac_pendulum_v1 zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_sac_pendulum_v1 PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_sac_pendulum_v1)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_sac_pendulum_v1)
target_compile_definitions(rl_zoo_sac_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_SAC)
target_compile_definitions(rl_zoo_sac_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_PENDULUM_V1)
# SAC AcrobotSwingup-v0
add_executable(rl_zoo_sac_acrobot_swingup_v0 zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_sac_acrobot_swingup_v0 PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_sac_acrobot_swingup_v0)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_sac_acrobot_swingup_v0)
target_compile_definitions(rl_zoo_sac_acrobot_swingup_v0 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_SAC)
target_compile_definitions(rl_zoo_sac_acrobot_swingup_v0 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_ACROBOT_SWINGUP_V0)
# SAC Learning to Fly
add_executable(rl_zoo_sac_l2f zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_sac_l2f PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_sac_l2f)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_sac_l2f)
target_compile_definitions(rl_zoo_sac_l2f PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_SAC)
target_compile_definitions(rl_zoo_sac_l2f PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_L2F)
# TD3 Pendulum-v1
add_executable(rl_zoo_td3_pendulum_v1 zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_td3_pendulum_v1 PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_td3_pendulum_v1)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_td3_pendulum_v1)
target_compile_definitions(rl_zoo_td3_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_TD3)
target_compile_definitions(rl_zoo_td3_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_PENDULUM_V1)
# TD3 Learning to Fly
add_executable(rl_zoo_td3_l2f zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_td3_l2f PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_td3_l2f)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_td3_l2f)
target_compile_definitions(rl_zoo_td3_l2f PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_TD3)
target_compile_definitions(rl_zoo_td3_l2f PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_L2F)
if(MSVC)
    # The default stack size of MSVC is 1MB. But in learning to fly,
    # rl::loop::steps::save_trajectories::to_string requires 1869360 bytes
    set_target_properties(rl_zoo_td3_l2f PROPERTIES LINK_FLAGS /STACK:10000000)
    set_target_properties(rl_zoo_sac_l2f PROPERTIES LINK_FLAGS /STACK:10000000)
endif()
# PPO Pendulum-v1
add_executable(rl_zoo_ppo_pendulum_v1 zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_ppo_pendulum_v1 PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_ppo_pendulum_v1)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_ppo_pendulum_v1)
target_compile_definitions(rl_zoo_ppo_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_PPO)
target_compile_definitions(rl_zoo_ppo_pendulum_v1 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_PENDULUM_V1)

# PPO Bottleneck-v0
add_executable(rl_zoo_ppo_bottleneck_v0 zoo_cli.cpp zoo.cpp)
target_link_libraries(rl_zoo_ppo_bottleneck_v0 PRIVATE RLtools::RLtools)
RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_ppo_bottleneck_v0)
RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_ppo_bottleneck_v0)
target_compile_definitions(rl_zoo_ppo_bottleneck_v0 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_PPO)
target_compile_definitions(rl_zoo_ppo_bottleneck_v0 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_BOTTLENECK_V0)

if(RL_TOOLS_RL_ENVIRONMENTS_ENABLE_MUJOCO)
    # PPO Ant-v4
    add_executable(rl_zoo_ppo_ant_v4 zoo_cli.cpp zoo.cpp)
    target_link_libraries(rl_zoo_ppo_ant_v4 PRIVATE RLtools::RLtools)
    RL_TOOLS_RL_ZOO_LINK_ZLIB_OR_NOT(rl_zoo_ppo_ant_v4)
    RL_TOOLS_RL_ZOO_LINK_CLI11_OR_NOT(rl_zoo_ppo_ant_v4)
    target_compile_definitions(rl_zoo_ppo_ant_v4 PRIVATE RL_TOOLS_RL_ZOO_ALGORITHM_PPO)
    target_compile_definitions(rl_zoo_ppo_ant_v4 PRIVATE RL_TOOLS_RL_ZOO_ENVIRONMENT_ANT_V4)
endif()
